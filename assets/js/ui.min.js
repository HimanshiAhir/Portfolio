$(window).on("load", function () {
  scrollToAnchor();
});

$(document).ready(function () {
  typedJS();
  $(".hamburger").click(function () {
    $(this).toggleClass("is-active");
    $(".header-wrap").toggleClass("active");
  });
  $(".theme-toggler").click(function () {
      $("body").toggleClass("dark-ui");
      $(".theme-togglericon.moon").toggleClass('d-none');
  });
  $(window).resize(function () {
    var winWidth = $(window).width();
    if (winWidth < 991) {
      $(".head-links").click(function () {
        $(".hamburger").removeClass("is-active");
        $(".header-wrap").removeClass("active");
      });
    }
  });
  var winWidth = $(window).width();
  if (winWidth < 991) {
    $(".head-links").click(function () {
      $(".hamburger").removeClass("is-active");
      $(".header-wrap").removeClass("active");
    });
  }
});

function typedJS() {
  var $textRotate = $(".text-rotate");
  if ($textRotate.length > 0) {
    var options = {
      strings: $textRotate.attr("data-elements").split(","),
      typeSpeed: 100,
      backDelay: 3000,
      backSpeed: 50,
      loop: true,
    };
    var typed = new Typed(".text-rotate", options);
  }
}

function scrollToAnchor() {
  //getting the anchor link in the URL and deleting the `#`
  var value = window.location.hash.replace("#", "");
  if (value.length > 0) {
    var sectionAnchor = "#" + value;
    $("#main > section.active, #menu > li a").removeClass("active");
    $("#main > section" + sectionAnchor).addClass("active");
    $("#menu > li a[href$=" + value + "]").addClass("active");
  }
}

var $menuLink = $("#menu > li a, .contact-btn");
var $main = $("#main");

$menuLink.on("click", function () {
  $("#main > section.active, #menu > li a").removeClass("active");
  $(this).addClass("active");
  var $valuePaaser = $(this).attr("href");
  $main.children($valuePaaser).addClass("active");
});
$(".contact-btn").on("click", function () {
  $("#menu > li a[href$='#contact']").addClass("active");
});
$(".next-page").on("click", function () {
  if ($("#menu > li a.active").attr("href") !== "#contact") {
    $("#menu > li a.active").each(function () {
      $(this)
        .parents("li")
        .next("li")
        .children("a")
        .each(function () {
          $(this).addClass("active");
          var $id = $(this).attr("href");
          $("#main > section.active").removeClass("active");
          $main.children($id).addClass("active");
        });
      $(this).removeClass("active");
    });
  } else {
    $("#main > section.active, #menu > li a.active").removeClass("active");
    $("#menu > li:first-child a, main > section:first-child").addClass(
      "active"
    );
  }
});

$(".prev-page").on("click", function () {
  if ($("#menu > li a.active").attr("href") !== "#home") {
    $("#menu > li a.active").each(function () {
      $(this)
        .parents("li")
        .prev("li")
        .children("a")
        .each(function () {
          $(this).addClass("active");
          var $id = $(this).attr("href");
          $("main > section.active").removeClass("active");
          $main.children($id).addClass("active");
        });
      $(this).removeClass("active");
    });
  } else {
    $("main > section.active, #menu > li a.active").removeClass("active");
    $("#menu > li:last-child a, main > section:last-child").addClass("active");
  }
});

var swiper = new Swiper(".mySwiper", {
  slidesPerView: 1,
  spaceBetween: 30,
  grabCursor: true,
  loop: true,
  speed: 500,
  pagination: {
    el: ".swiper-pagination",
    dynamicBullets: true,
  },
  navigation: {
    nextEl: ".client-slide-right",
    prevEl: ".client-slide-left",
  },
  breakpoints: {
    640: {
      slidesPerView: 1,
    },
    768: {
      slidesPerView: 2,
      spaceBetween: 30,
    },
    1024: {
      slidesPerView: 3,
      spaceBetween: 30,
    },
  },
});

// external js: isotope.pkgd.js

// init Isotope
var $grid = $(".portfolio-wrap").isotope({
  itemSelector: ".portfolio-item",
});

// store filter for each group
var filters = {};

$(".portfolio-filter").on("click", ".work-links", function (event) {
  var $button = $(event.currentTarget);
  // get group key
  var $buttonGroup = $button.parents(".portfolio-filter");
  // set filter for group
  filters = $button.attr("data-filter");
  // combine filters
  var filterValue = concatValues(filters);
  // set filter for Isotope
  $grid.isotope({ filter: filterValue });
});

// change is-checked class on buttons
$(".portfolio-filter").each(function (i, buttonGroup) {
  var $buttonGroup = $(buttonGroup);
  $buttonGroup.on("click", ".work-links", function (event) {
    $buttonGroup.find(".active").removeClass("active");
    var $button = $(event.currentTarget);
    $button.addClass("active");
  });
});

// flatten object by concatting values
function concatValues(obj) {
  var value = "";
  for (var prop in obj) {
    value += obj[prop];
  }
  return value;
}

// Isotop Front Page 
// external js: isotope.pkgd.js, imagesloaded.pkgd.js
$( window ).bind("load", function() {
  // init Isotope
  var $grid = $('.grid').isotope({
  itemSelector: '.grid-item',
  percentPosition: true,
  masonry: {
  columnWidth: '.grid-sizer'
  }
  });
  // layout Isotope after each image loads
  $grid.imagesLoaded().progress( function() {
  $grid.isotope('layout');
  });
  
  // store filter for each group
  var filters = {};

  $('#filters').on( 'click', '.button', function() {
    var $this = $(this);
    // get group key
    var $buttonGroup = $this.parents('.button-group');
    var filterGroup = $buttonGroup.attr('data-filter-group');
    // set filter for group
    filters[ filterGroup ] = $this.attr('data-filter');
    // combine filters
    var filterValue = concatValues( filters );
    // set filter for Isotope
    $grid.isotope({ filter: filterValue });
  });

  // change is-checked class on buttons
  $('.button-group').each( function( i, buttonGroup ) {
    var $buttonGroup = $( buttonGroup );
    $buttonGroup.on( 'click', 'button', function() {
      $buttonGroup.find('.is-checked').removeClass('is-checked');
      $( this ).addClass('is-checked');
    });
  });

  // flatten object by concatting values
  function concatValues( obj ) {
    var value = '';
    for ( var prop in obj ) {
      value += obj[ prop ];
    }
    return value;
  }

  }); //fin load function    